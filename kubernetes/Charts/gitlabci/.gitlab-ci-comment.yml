---
image: alpine:latest

stages:
  - build
  - test
  - release
  - cleanup

build:
  stage: build
  image: docker:git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches
  tags:
    - docker

test:
  stage: test
  script:
    - exit 0
  only:
    - branches
  tags:
    - test

release:
  stage: release
  image: docker
  services:
    - docker:dind
  script:
    - setup_docker
    - release
  variables:
    DOCKER_TLS_CERTDIR: ""
  only:
    - main

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE="kube-system"
  export DOCKER_REGISTRY="$CI_REGISTRY"
  export DOCKER_REGISTRY_PASS="$CI_REGISTRY_PASSWORD"
  export DOCKER_REGISTRY_USER="$CI_REGISTRY_USER"

  function setup_docker() {

    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://docker:2375'
      fi
    fi

    if [[ -n "$CI_REGISTRY_USER" ]] && [[ -n "$CI_REGISTRY_PASSWORD" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo -e "\n"
    else
      docker login
      echo -e "\n"
    fi
  }

  function release() {

    echo "Updating docker tag images ..."
    docker buildx imagetools create "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" --tag "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    echo -e "\n"
  }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt

    echo "Building and pushing to GitLab Container Registry..."
    docker buildx build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" --platform=linux/amd64 --push .
    echo -e "\n"
  }

before_script:
  - *auto_devops
